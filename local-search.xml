<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Tarjan 求有向图的强连通分量</title>
    <link href="/2024/06/23/Tarjan%E6%B1%82%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    <url>/2024/06/23/Tarjan%E6%B1%82%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>重温Tarjan, 网上看了许多博客感觉都讲的不清楚. 故传上来自己的笔记,希望帮到大家.</p><p>提到的一些概念可以参考 oi wiki, 代码也是 oi wiki 的,因为我不认为我能写出比大佬更好的代码了.</p><hr /><p><strong>强连通分量:</strong> 有向图的最大强连通子图 (有向图中任意两点可达 )</p><ul><li><p><strong>Tarjan</strong></p><ol type="1"><li><p>对每个结点维护:</p><ul><li><p><code>dfn[x]</code>: 当前节点的 dfs 序.</p></li><li><p><code>low[x]</code>: x 向下搜索能到达的最小 dfs 序.</p></li></ul></li><li><p>更新 low:</p><ol type="1"><li><p><strong>v 未被访问过:</strong> 初始<code>low[v] = dfn[v]</code>.v 入栈. 回溯时用 low[v] 更新它的 fa 的 low[].</p></li><li><p><strong>v 被访问过, 且还在栈中:</strong> 用 dfs[v] 更新 fa 的low.</p></li><li><p><strong>v 被访问过, 不在栈中:</strong> 说明这是一个 fa 到 v的单向访问, 跳过.</p></li></ol></li><li><p>获取答案:</p><p>能让 <code>dfn[x] &gt; low[x]</code>, 只有当 X 的子树中某个节点 C有<span class="math inline">\(\begin{cases}1.一条横向边连接到一棵已遍历过的子树~A\\2.一条返祖边连接到~X~的祖先~xfa\end{cases}\)</span> .</p><ol type="1"><li>横向边: 说明 A 没有连接到 C 的边, 否则在之前 C 就被遍历了, 轮不到 X来遍历. 就用是否 C 在栈中来排除这个情况, 子树 A中的所有强连通分量之前已经出栈过了( 看代码的实现 ).</li><li>返祖边: 说明 xfa -&gt; x -&gt; c -&gt; xfa 形成环,在同一个强连通子图( 我们知道, 强连通图是许多环嵌套成的 ).而且这个子图的根是 xfa 满足 <code>dfn[xfa] = low[xfa]</code>.</li></ol><p>此时栈中进来过三类节点 : <span class="math display">\[\begin {cases}1.~在~x~的子树中\begin{cases}1.~属于上述~xfa~循环的,~在同一个强连通子图.\\2.~不在同一个强连通子图,~那递归的讲,~在之前就因为属于某个~xfa&#39;~(在~X~的子树中),而被踢出栈了.\end{cases}\\2.不在~x~的子树中(即在已遍历过的子树中),~在栈中的位置一定在~x~的下面.\end{cases}\]</span></p><p>故, 回溯时若节点符合 <code>dfn[x] = low[x]</code>,说明当前节点是它所属连通块的最小节点.栈里它之上所有点都是一个强连通块.</p></li></ol></li></ul><p><strong>代码:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> Maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br>   <br>   <span class="hljs-type">int</span> dfn[Maxn], low[Maxn], dfncnt, s[Maxn], in_stack[Maxn], tp;<br>   <span class="hljs-type">int</span> scc[Maxn], sc;  <span class="hljs-comment">// 结点 i 所在 SCC 的编号</span><br>   <span class="hljs-type">int</span> sz[Maxn];       <span class="hljs-comment">// 强连通 i 的大小</span><br>   <br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>       low[u] = dfn[u] = ++dfncnt, s[++tp] = u, in_stack[u] = <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[u]; i; i = eg[i].nex) &#123;<br>           <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;v = eg[i].to;<br>           <span class="hljs-keyword">if</span> (!dfn[v]) &#123;<br>               <span class="hljs-built_in">tarjan</span>(v);<br>               low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>           &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (in_stack[v]) &#123;<br>               low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (dfn[u] == low[u]) &#123;<br>           ++sc;<br>           <span class="hljs-keyword">while</span> (s[tp] != u) &#123;<br>               scc[s[tp]] = sc;<br>               sz[sc]++;<br>               in_stack[s[tp]] = <span class="hljs-number">0</span>;<br>               --tp;<br>           &#125;<br>           scc[s[tp]] = sc;<br>           sz[sc]++;<br>           in_stack[s[tp]] = <span class="hljs-number">0</span>;<br>           --tp;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人静态博客</title>
    <link href="/2024/06/23/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/06/23/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>用此文记录一下我这个博客的搭建过程. 参考了这篇博客 <ahref="https://pdpeng.github.io/2022/01/19/setup-personal-blog/">Blog</a></p><h2 id="step-1-建一个在本地运行的网站">Step 1:建一个在本地运行的网站</h2><ol type="1"><li><p>用的是 Hexo 框架. 基于 node.js 运行. 故先下载 node.js <ahref="https://nodejs.org/en/">&gt; 下载直达 &lt;</a></p></li><li><p>安装 Hexo. 运行 :<code>npm install -g hexo-cli</code></p><p>Hexo 将会安装在默认位置.</p><p>文档在这 <a href="https://hexo.io/zh-cn/docs/">Hexo Doc</a>,可以的话, 官方文档是好于任何博客的东西.</p></li><li><p>在新建的空博客文件夹内运行: <code>hexo init</code>, 初始化 Hexo.文件夹内就多了 Hexo 的初始文件.</p></li><li><p>这时运行 <code>hexo s</code>, 就可以在本地运行你的网站了.一个很简陋的默认站. 使用的是默认的 landspace 主题.</p></li></ol><h2 id="step2-把它部署到线上">Step2: 把它部署到线上</h2><p><strong>GitHubPages</strong>是一种由<strong>GitHub</strong>中的仓库/项目直接创建的网页。管理简单，在本地编辑仓库中的内容，上传到GitHub上，GitHubPages就能快速完成更新，重点是<strong>不花钱，不花钱，不花钱</strong>.</p><ol type="1"><li><p>新建 Github 仓库, 命名时一定要是 <username>.github.io,这样就自动识别位 Github Page 的 仓库. 属性为 Public</p></li><li><p>将本地博客文件夹的文件上传到仓库中. 这里要使用到 Git.建议学习基本的操作, 更多 Git 的问题网上都有, 不赘述. <ahref="https://www.runoob.com/git/git-basic-operations.html">&gt; 看这里&lt;</a></p></li><li><p>到 _congif.yml 文件中修改 deploy 配置:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">type:</span> git <span class="hljs-meta"># git 前有一个空格</span><br><span class="hljs-symbol">repo:</span> https:<span class="hljs-comment">//github.com/&lt;Username&gt;/&lt;username&gt;.github.io # 就是仓库地址</span><br><span class="hljs-symbol">branch:</span> master <span class="hljs-meta"># 选择上传的分枝</span><br></code></pre></td></tr></table></figure></li><li><p>本地运行 :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">hexo clean <span class="hljs-comment">//清除缓存, 当其它命令无效时可以试试</span><br>hexo g <span class="hljs-comment">//生成博客目录</span><br>hexo s <span class="hljs-comment">//本地预览</span><br>hexo d <span class="hljs-comment">//部署项目</span><br></code></pre></td></tr></table></figure><p>eg: 这里会缺少一个依赖:<code>npm install hexo-deployer-git --save</code>, 直接安装.</p><p>上传过程中可能遇到 git 的问题, 大概率时网络问题.</p></li></ol><p>到此为止, 就成功上线了自己的博客. 在<code>&lt;username&gt;.github.io</code>.</p><h2 id="step3-主题配置">Step3: 主题配置</h2><p>我用的是 fluid 主题. 就因为它好看, 有原生的中文文档. <ahref="https://hexo.fluid-dev.com/docs/">fluid dos</a></p><p>配置文档里讲的很好.</p><p>更多主题: <a href="https://hexo.io/themes/">官方主题库</a></p><h2 id="step4-图床">Step4: 图床</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>helle world</title>
    <link href="/2024/06/22/hello-world/"/>
    <url>/2024/06/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
